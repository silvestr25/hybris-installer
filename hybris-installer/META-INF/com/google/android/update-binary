#!/sbin/sh
# An extensible custom Hybris Installer script.
# https://git.io/fjMH9

# Details about this version:
#   Device  : %DEVICE%
#   Release : %VERSION%
#   Date    : %DATE%
#   Size    : ~%IMAGE_SIZE%

# >>> TWRP init >>>

OUTFD="/proc/self/fd/$2" # e.g. "/proc/self/fd/28"
ZIPFILE="$3"             # e.g. "/sdcard/%DST_PKG%.zip"
FILES="/tmp/hybris-installer"

# Set progress bar percentage using a fraction ($1) in range 0.00 - 1.00
set_progress() { echo -e "set_progress $1\n" > $OUTFD; }

# Print some text ($1) on the screen
ui_print() { [ -z "$1" ] && echo -e "ui_print  \nui_print" > $OUTFD || echo -e "ui_print $@\nui_print" > $OUTFD; }

# Log some text ($1) for script debugging
log() { echo "hybris-installer: $@"; }

# Remove package residue files from /tmp and unmount partitions
cleanup() { log "Cleaning up..."; umount /system; rm -rf $FILES/; }

# Before quitting with an exit code ($1), show a message ($2)
abort() { ui_print "E$1: $2"; cleanup; exit $1; }

# <<< TWRP init <<<

# >>> Custom functions >>>

# Verify device boardname validity (e.g. not unset, no spaces / uppercase chars)
invalid_device() { [[ -z "$CURRENT_DEVICE" || "$CURRENT_DEVICE" = *" "* || `echo "$CURRENT_DEVICE" | grep -q [A-Z]` ]]; }

# <<< Custom functions <<<

# Constants & variables
VERSION="%VERSION%" # e.g. "3.2.0.12 (Torronsuo)"
TARGET_LOS_VER="%LOS_VER%" # e.g. "16.0"
TARGET_DEVICE="%DEVICE%" # e.g. "cheeseburger"
CURRENT_DEVICE=`getprop ro.omni.device`
ROOT="/data/.stowaways/sailfishos"
SLOT="$(echo $ZIPFILE | cut -d"_" -f2 | cut -d"." -f1)" # Just don't mess with the zipfile name...
FORCE_REINSTALL=0

# >>> Sanity checks >>>

# ZIP file name
if [ $SLOT != "a" ] && [ $SLOT != "b" ]; then
	ui_print "Unable to read slot from filename, please ensure the zip file only contains a single underscore, that is is directly before the slot suffix"
	ui_print "and the slot suffix is followed by a '.'"
	ui_print "e.g. sailfishos-3.3.0.16-20200820-guacamole-SLOT_a.zip"
	abort 99
fi

# Device
invalid_device && CURRENT_DEVICE=`getprop ro.product.device`
invalid_device && CURRENT_DEVICE=`getprop ro.build.product`
[ "$CURRENT_DEVICE" != "$TARGET_DEVICE" ] && abort 7 "This package is for '$TARGET_DEVICE' devices; this is a '$CURRENT_DEVICE'."

# ext4 check for /data
(mount | grep -q /data || mount /data) || abort 2 "Couldn't mount /data; running e2fsck and rebooting may help."

# Treble
# TODO: Detect this don't go off device name
if [ -L /dev/block/bootdevice/by-name/system_a ]; then # TWRP 3.3 on these devices doesn't handle system_is_root properly, need to fix it up manually
	log "Device is system-as-root, ensuring /system_root and /system are mounted correctly"
	umount /system
	umount /system_root
	mount /dev/block/bootdevice/by-name/system_$SLOT /system_root || abort 99 "Failed to mount system to /system_root"
	mount -o bind /system_root/system /system || abort 98 "Failed to bind mount /system_root/system to /system"
	log "Successfully fixed /system mountpoint, toybox should work properly now..."
fi

# Android
(mount | grep -q /system || mount /system) || abort 5 "Couldn't mount /system!"
if [ `cat /system/build.prop | grep lineage.build.version= | cut -d'=' -f2` != "$TARGET_LOS_VER" ]; then
	if [ ! -f /tmp/sfos_flash_confirm ]; then
		touch /tmp/sfos_flash_confirm
		abort 6 "If you don't know what you're doing: please factory reset & dirty flash LineageOS $TARGET_LOS_VER before this zip. Otherwise reflash again to confirm force flashing of SFOS."
	fi
	log "About to perform forced flash of SFOS"
fi
[ -f /system/bin/toybox ] || abort 8 "Your ROM doesn't ship with toybox; extracting of SFOS rootfs isn't possible!"
if [ -f $ROOT/etc/os-release ]; then
	if [ ! -f /tmp/sfos_fresh_confirm ]; then
		touch /tmp/sfos_fresh_confirm
		ui_print "===================================================="
		ui_print "You already have Sailfish OS installed, reflash this ZIP if you're sure you want to overwrite your existing install"
		ui_print "===================================================="
		abort 9 "Confirm overwrite"
	fi
	FORCE_REINSTALL=1
	log "About to perform forced reinstall of SFOS; preserving droid-boot image..."
	mv $ROOT/boot/droid-boot.img /tmp/
fi
rm -f /tmp/sfos_f{la,re}sh_confirm

# <<< Sanity checks <<<

# >>> Script >>>

# Reset shown progress bar to 0%
set_progress 0

# Calculate centering offset indent on left
offset=`echo -n $VERSION | wc -m` # Character length of the version string
offset=`expr 52 - 23 - $offset`   # Remove constant string chars from offset calculation
offset=`expr $offset / 2`         # Get left offset char count instead of space on both sides

# Build the left side indentation offset string
for i in `seq 1 $offset`; do indent="${indent} "; done

# Splash
ui_print "Installing to slot: _$SLOT"
ui_print "-===============- Hybris Installer -===============-"
ui_print
ui_print "                          .':oOl."
ui_print "                       ':c::;ol."
ui_print "                    .:do,   ,l."
ui_print "                  .;k0l.   .ll.             .."
ui_print "                 'ldkc   .,cdoc:'.    ..,;:::;"
ui_print "                ,o,;o'.;::;'.  'coxxolc:;'."
ui_print "               'o, 'ddc,.    .;::::,."
ui_print "               cl   ,x:  .;:c:,."
ui_print "               ;l.   .:ldoc,."
ui_print "               .:c.    .:ll,"
ui_print "                 'c;.    .;l:"
ui_print "                   :xc.    ,o'"
ui_print "                   'xxc.   ;o."
ui_print "                   :l'c: ,lo,"
ui_print "                  ,o'.ooclc'"
ui_print "                .:l,,x0o;."
ui_print "              .;llcldl,"
ui_print "           .,oOOoc:'"
ui_print "       .,:lddo:'."
ui_print "      oxxo;."
ui_print
ui_print "${indent}Installing Sailfish OS $VERSION"
ui_print "                   Please wait ..."

# Start
log "Extracting package '$ZIPFILE'..."
mkdir -p $FILES/
unzip -o "$ZIPFILE" -x META-INF/* -d $FILES/

log "Extracting SFOS rootfs..."
ARCHIVE="$FILES/sfos-rootfs.tar.bz2"
rm -rf $ROOT/
mkdir -p $ROOT/
/system/bin/toybox tar -xj -f $ARCHIVE -C $ROOT/ || abort 10 "Couldn't extract SFOS rootfs!"
rm $ARCHIVE

log "Cloning /persist from Android to prevent issues with WiFi when dual booting"
mkdir /persist
mount /dev/block/bootdevice/by-name/persist /persist
mkdir -p $ROOT/mnt/vendor/persist
cp -r /persist/* $ROOT/mnt/vendor/persist/
log "Disabling /mnt/vendor/persist mount point"
ln -s /dev/null $ROOT/etc/systemd/system/mnt-vendor-persist.mount
log "Deleting wlan_mac.bin to ensure MAC gets loaded from firmware"
rm $ROOT/mnt/vendor/persist/wlan_mac.bin

log "Creating /system_root mountpoint"
mkdir -p $ROOT/system_root

log "Creating mount units for correct slot"

makeMount() {
	source=$(readlink -f /dev/block/bootdevice/by-name/$1_$SLOT | sed "s /block/ / ")
	[[ -z $source ]] && source=$1 # If it's not a valid partlabel then it's a bind mount
	mnt_target=$2
	type=$3
	options=$4
	unit=$5
	log "$unit: $source -> $mnt_target ($type with $options)"
	echo "# Autogenerated by hybris-installer
# https://github.com/sailfish-oneplus6/hybris-installer
[Unit]
Description=Droid mount for $mnt_target
Before=local-fs.target systemd-modules-load.service

[Mount]
What=$source
Where=$mnt_target
Type=$type
Options=$options
TimeoutSec=10

[Install]
WantedBy=local-fs.target" > $ROOT/lib/systemd/system/$unit.mount
	ln -s $ROOT/lib/systemd/system/$unit.mount $ROOT/lib/systemd/system/local-fs.target.wants/$unit.mount
}

# Follwing was extracted from device fstab with cat /vendor/etc/fstab.qcom | grep -v "#" | grep "by-name" | sed -E "s/ +/ /g" | cut -d" " -f1,2,3,4
# /dev/block/bootdevice/by-name/system / ext4 ro,barrier=1,discard
# /dev/block/bootdevice/by-name/userdata /data ext4 noatime,nosuid,nodev,barrier=1,noauto_da_alloc,discard
# /dev/block/bootdevice/by-name/modem /vendor/firmware_mnt vfat ro,shortname=lower,uid=1000,gid=1000,dmask=227,fmask=337,context=u:object_r:firmware_file:s0
# /dev/block/bootdevice/by-name/dsp /vendor/dsp ext4 ro,nosuid,nodev,barrier=1
# /dev/block/bootdevice/by-name/persist /mnt/vendor/persist ext4 noatime,nosuid,nodev,barrier=1
# /dev/block/bootdevice/by-name/bluetooth /vendor/bt_firmware vfat ro,shortname=lower,uid=1002,gid=3002,dmask=227,fmask=337,context=u:object_r:bt_firmware_file:s0
# /dev/block/bootdevice/by-name/misc /misc emmc defaults

makeMount system /system_root ext4 ro,barrier=1,discard system_root
makeMount /system_root/system /system none bind system
makeMount vendor /vendor ext4 ro,relatime vendor
makeMount modem /vendor/firmware_mnt vfat ro,shortname=lower,uid=1000,gid=1000,dmask=227,fmask=337 vendor-firmware_mnt
makeMount dsp /vendor/dsp ext4 ro,nosuid,nodev,barrier=1 vendor-dsp
makeMount bluetooth /vendor/bt_firmware vfat ro,shortname=lower,uid=1002,gid=3002,dmask=227,fmask=337 vendor-bt_firmware

log "Fixing up init scripts..."
sed -e "/extraenv/s/^/#/g" -e "/import \/init.\${ro.hardware}.rc/s/^/#/" -e "/ro.zygote/s/^/#/g" -e "/start update_verifier/s/^/#/g" \
    -e "s/\/cpus\ /\/cpuset.cpus /g" -e "s/\/cpus$/\/cpuset.cpus/g" -e "s/\/mems\ /\/cpuset.mems /g" -e "s/\/mems$/\/cpuset.mems/g" \
    -i $ROOT/init.rc || log "Couldn't fix-up init script!"
rm $ROOT/init.extraenv.armeabi-v7a.rc

log "Disabling forced encryption in vendor fstab..."
(umount /vendor &> /dev/null; mount -o rw /vendor && sed "s/fileencryption/encryptable/" -i /vendor/etc/fstab.qcom) || log "Couldn't disable forced encryption!"
umount /vendor &

if [ "$FORCE_REINSTALL" = "0" ]; then
	log "Backing up droid-boot image..."
	dd if=/dev/block/bootdevice/by-name/boot of=$ROOT/boot/droid-boot.img
elif [ -f /tmp/droid-boot.img ]; then
	log "Moving back droid-boot image..."
	mv /tmp/droid-boot.img $ROOT/boot/
fi

log "Writing hybris-boot image to slot $SLOT..."
dd if=$ROOT/boot/hybris-boot.img of=/dev/block/bootdevice/by-name/boot_$SLOT || abort 11 "Couldn't write Hybris boot image!"

log "Applying patches"
cd $FILES/patches #apply-patches has to be run with PWD be it's working directory
sh apply-patches.sh $ROOT #directory of the SFOS install must be passed as first param

log "Setting active slot to $SLOT"
bootctl set-active-boot-slot $SLOT

# <<< Script <<<

# Succeeded.
log "Sailfish OS installed successfully."
ui_print "            All done, enjoy your new OS!"
ui_print
cleanup
exit 0
